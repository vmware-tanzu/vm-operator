// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/vm-operator/pkg/vmprovider (interfaces: VirtualMachineProviderInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/vmware-tanzu/vm-operator-api/api/v1alpha1"
	vmprovider "github.com/vmware-tanzu/vm-operator/pkg/vmprovider"
	reflect "reflect"
)

// MockVirtualMachineProviderInterface is a mock of VirtualMachineProviderInterface interface
type MockVirtualMachineProviderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineProviderInterfaceMockRecorder
}

// MockVirtualMachineProviderInterfaceMockRecorder is the mock recorder for MockVirtualMachineProviderInterface
type MockVirtualMachineProviderInterfaceMockRecorder struct {
	mock *MockVirtualMachineProviderInterface
}

// NewMockVirtualMachineProviderInterface creates a new mock instance
func NewMockVirtualMachineProviderInterface(ctrl *gomock.Controller) *MockVirtualMachineProviderInterface {
	mock := &MockVirtualMachineProviderInterface{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineProviderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVirtualMachineProviderInterface) EXPECT() *MockVirtualMachineProviderInterfaceMockRecorder {
	return m.recorder
}

// ClearSessionsAndClient mocks base method
func (m *MockVirtualMachineProviderInterface) ClearSessionsAndClient(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearSessionsAndClient", arg0)
}

// ClearSessionsAndClient indicates an expected call of ClearSessionsAndClient
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) ClearSessionsAndClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSessionsAndClient", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).ClearSessionsAndClient), arg0)
}

// ComputeClusterCpuMinFrequency mocks base method
func (m *MockVirtualMachineProviderInterface) ComputeClusterCpuMinFrequency(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeClusterCpuMinFrequency", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComputeClusterCpuMinFrequency indicates an expected call of ComputeClusterCpuMinFrequency
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) ComputeClusterCpuMinFrequency(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeClusterCpuMinFrequency", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).ComputeClusterCpuMinFrequency), arg0)
}

// CreateOrUpdateVirtualMachineSetResourcePolicy mocks base method
func (m *MockVirtualMachineProviderInterface) CreateOrUpdateVirtualMachineSetResourcePolicy(arg0 context.Context, arg1 *v1alpha1.VirtualMachineSetResourcePolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateVirtualMachineSetResourcePolicy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateVirtualMachineSetResourcePolicy indicates an expected call of CreateOrUpdateVirtualMachineSetResourcePolicy
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) CreateOrUpdateVirtualMachineSetResourcePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateVirtualMachineSetResourcePolicy", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).CreateOrUpdateVirtualMachineSetResourcePolicy), arg0, arg1)
}

// CreateVirtualMachine mocks base method
func (m *MockVirtualMachineProviderInterface) CreateVirtualMachine(arg0 context.Context, arg1 *v1alpha1.VirtualMachine, arg2 vmprovider.VmConfigArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualMachine", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVirtualMachine indicates an expected call of CreateVirtualMachine
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) CreateVirtualMachine(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualMachine", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).CreateVirtualMachine), arg0, arg1, arg2)
}

// DeleteNamespaceSessionInCache mocks base method
func (m *MockVirtualMachineProviderInterface) DeleteNamespaceSessionInCache(arg0 context.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteNamespaceSessionInCache", arg0, arg1)
}

// DeleteNamespaceSessionInCache indicates an expected call of DeleteNamespaceSessionInCache
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) DeleteNamespaceSessionInCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespaceSessionInCache", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).DeleteNamespaceSessionInCache), arg0, arg1)
}

// DeleteVirtualMachine mocks base method
func (m *MockVirtualMachineProviderInterface) DeleteVirtualMachine(arg0 context.Context, arg1 *v1alpha1.VirtualMachine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMachine indicates an expected call of DeleteVirtualMachine
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) DeleteVirtualMachine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMachine", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).DeleteVirtualMachine), arg0, arg1)
}

// DeleteVirtualMachineSetResourcePolicy mocks base method
func (m *MockVirtualMachineProviderInterface) DeleteVirtualMachineSetResourcePolicy(arg0 context.Context, arg1 *v1alpha1.VirtualMachineSetResourcePolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualMachineSetResourcePolicy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVirtualMachineSetResourcePolicy indicates an expected call of DeleteVirtualMachineSetResourcePolicy
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) DeleteVirtualMachineSetResourcePolicy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMachineSetResourcePolicy", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).DeleteVirtualMachineSetResourcePolicy), arg0, arg1)
}

// DoesContentLibraryExist mocks base method
func (m *MockVirtualMachineProviderInterface) DoesContentLibraryExist(arg0 context.Context, arg1 *v1alpha1.ContentLibraryProvider) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesContentLibraryExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesContentLibraryExist indicates an expected call of DoesContentLibraryExist
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) DoesContentLibraryExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesContentLibraryExist", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).DoesContentLibraryExist), arg0, arg1)
}

// DoesVirtualMachineExist mocks base method
func (m *MockVirtualMachineProviderInterface) DoesVirtualMachineExist(arg0 context.Context, arg1 *v1alpha1.VirtualMachine) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesVirtualMachineExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesVirtualMachineExist indicates an expected call of DoesVirtualMachineExist
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) DoesVirtualMachineExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesVirtualMachineExist", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).DoesVirtualMachineExist), arg0, arg1)
}

// DoesVirtualMachineSetResourcePolicyExist mocks base method
func (m *MockVirtualMachineProviderInterface) DoesVirtualMachineSetResourcePolicyExist(arg0 context.Context, arg1 *v1alpha1.VirtualMachineSetResourcePolicy) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesVirtualMachineSetResourcePolicyExist", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesVirtualMachineSetResourcePolicyExist indicates an expected call of DoesVirtualMachineSetResourcePolicyExist
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) DoesVirtualMachineSetResourcePolicyExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesVirtualMachineSetResourcePolicyExist", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).DoesVirtualMachineSetResourcePolicyExist), arg0, arg1)
}

// GetVirtualMachineImage mocks base method
func (m *MockVirtualMachineProviderInterface) GetVirtualMachineImage(arg0 context.Context, arg1, arg2 string) (*v1alpha1.VirtualMachineImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualMachineImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.VirtualMachineImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualMachineImage indicates an expected call of GetVirtualMachineImage
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) GetVirtualMachineImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualMachineImage", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).GetVirtualMachineImage), arg0, arg1, arg2)
}

// Initialize mocks base method
func (m *MockVirtualMachineProviderInterface) Initialize(arg0 <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Initialize", arg0)
}

// Initialize indicates an expected call of Initialize
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) Initialize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).Initialize), arg0)
}

// ListVirtualMachineImages mocks base method
func (m *MockVirtualMachineProviderInterface) ListVirtualMachineImages(arg0 context.Context, arg1 string) ([]*v1alpha1.VirtualMachineImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachineImages", arg0, arg1)
	ret0, _ := ret[0].([]*v1alpha1.VirtualMachineImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachineImages indicates an expected call of ListVirtualMachineImages
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) ListVirtualMachineImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachineImages", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).ListVirtualMachineImages), arg0, arg1)
}

// ListVirtualMachineImagesFromContentLibrary mocks base method
func (m *MockVirtualMachineProviderInterface) ListVirtualMachineImagesFromContentLibrary(arg0 context.Context, arg1 v1alpha1.ContentLibraryProvider) ([]*v1alpha1.VirtualMachineImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualMachineImagesFromContentLibrary", arg0, arg1)
	ret0, _ := ret[0].([]*v1alpha1.VirtualMachineImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualMachineImagesFromContentLibrary indicates an expected call of ListVirtualMachineImagesFromContentLibrary
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) ListVirtualMachineImagesFromContentLibrary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualMachineImagesFromContentLibrary", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).ListVirtualMachineImagesFromContentLibrary), arg0, arg1)
}

// Name mocks base method
func (m *MockVirtualMachineProviderInterface) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).Name))
}

// UpdateVcPNID mocks base method
func (m *MockVirtualMachineProviderInterface) UpdateVcPNID(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVcPNID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVcPNID indicates an expected call of UpdateVcPNID
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) UpdateVcPNID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVcPNID", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).UpdateVcPNID), arg0, arg1, arg2)
}

// UpdateVirtualMachine mocks base method
func (m *MockVirtualMachineProviderInterface) UpdateVirtualMachine(arg0 context.Context, arg1 *v1alpha1.VirtualMachine, arg2 vmprovider.VmConfigArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualMachine", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVirtualMachine indicates an expected call of UpdateVirtualMachine
func (mr *MockVirtualMachineProviderInterfaceMockRecorder) UpdateVirtualMachine(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMachine", reflect.TypeOf((*MockVirtualMachineProviderInterface)(nil).UpdateVirtualMachine), arg0, arg1, arg2)
}
