// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vmware-tanzu/vm-operator/pkg/prober/probe (interfaces: Probe)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	context "github.com/vmware-tanzu/vm-operator/pkg/context"
	probe "github.com/vmware-tanzu/vm-operator/pkg/prober/probe"
	reflect "reflect"
)

// MockProbe is a mock of Probe interface
type MockProbe struct {
	ctrl     *gomock.Controller
	recorder *MockProbeMockRecorder
}

// MockProbeMockRecorder is the mock recorder for MockProbe
type MockProbeMockRecorder struct {
	mock *MockProbe
}

// NewMockProbe creates a new mock instance
func NewMockProbe(ctrl *gomock.Controller) *MockProbe {
	mock := &MockProbe{ctrl: ctrl}
	mock.recorder = &MockProbeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProbe) EXPECT() *MockProbeMockRecorder {
	return m.recorder
}

// Probe mocks base method
func (m *MockProbe) Probe(arg0 *context.ProbeContext) (probe.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Probe", arg0)
	ret0, _ := ret[0].(probe.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Probe indicates an expected call of Probe
func (mr *MockProbeMockRecorder) Probe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Probe", reflect.TypeOf((*MockProbe)(nil).Probe), arg0)
}
