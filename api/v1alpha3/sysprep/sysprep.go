// Â© Broadcom. All Rights Reserved.
// The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
// SPDX-License-Identifier: Apache-2.0

// +kubebuilder:object:generate=true

package sysprep

// Sysprep describes the object representation of a Windows sysprep.xml answer
// file.
//
// All fields and their values are transferred into the sysprep.xml file that
// VirtualCenter stores on the target virtual disk.
//
// For more detailed information, please see
// https://technet.microsoft.com/en-us/library/cc771830(v=ws.10).aspx.
type Sysprep struct {

	// +optional

	// GUIRunOnce is a representation of the Sysprep GuiRunOnce key.
	GUIRunOnce *GUIRunOnce `json:"guiRunOnce,omitempty"`

	// +optional

	// GUIUnattended is a representation of the Sysprep GUIUnattended key.
	GUIUnattended *GUIUnattended `json:"guiUnattended,omitempty"`

	// +optional

	// Identification is a representation of the Sysprep Identification key.
	Identification *Identification `json:"identification,omitempty"`

	// +optional

	// LicenseFilePrintData is a representation of the Sysprep
	// LicenseFilePrintData key.
	//
	// Please note this is required only for Windows 2000 Server and Windows
	// Server 2003.
	LicenseFilePrintData *LicenseFilePrintData `json:"licenseFilePrintData,omitempty"`

	// UserData is a representation of the Sysprep UserData key.
	UserData UserData `json:"userData"`
}

// GUIRunOnce maps to the GuiRunOnce key in the sysprep.xml answer file.
type GUIRunOnce struct {
	// +optional

	// Commands is a list of commands to run at first user logon, after guest
	// customization.
	Commands []string `json:"commands,omitempty"`
}

// GUIUnattended maps to the GuiUnattended key in the sysprep.xml answer file.
type GUIUnattended struct {
	// +optional

	// AutoLogon determine whether the machine automatically logs on as
	// Administrator.
	//
	// Please note if AutoLogon is true, then Password must be set or guest
	// customization will fail.
	AutoLogon bool `json:"autoLogon,omitempty"`

	// +optional

	// AutoLogonCount specifies the number of times the machine should
	// automatically log on as Administrator.
	//
	// Generally it should be 1, but if your setup requires a number of reboots,
	// you may want to increase it. This number may be determined by the list of
	// commands executed by the GuiRunOnce command.
	//
	// Please note this field must be specified with a non-zero positive integer
	// if AutoLogon is true.
	AutoLogonCount int32 `json:"autoLogonCount,omitempty"`

	// +optional

	// Password is the new administrator password for the machine.
	//
	// To specify that the password should be set to blank (that is, no
	// password), set the password value to NULL. Because of encryption, "" is
	// NOT a valid value.
	//
	// Please note if the password is set to blank and AutoLogon is true, the
	// guest customization will fail.
	//
	// If the XML file is generated by the VirtualCenter Customization Wizard,
	// then the password is encrypted. Otherwise, the client should set the
	// plainText attribute to true, so that the customization process does not
	// attempt to decrypt the string.
	//
	// When not explicitly specified, the Key field for the selector defaults to
	// `password`.
	Password *PasswordSecretKeySelector `json:"password,omitempty"`

	// +kubebuilder:default=85
	// +kubebuilder:validation:Minimum=0

	// TimeZone is the time zone index for the virtual machine.
	//
	// Please note that numbers correspond to time zones listed at
	// https://bit.ly/3Rzv8oL.
	//
	// Defaults to UTC.
	TimeZone int32 `json:"timeZone"`
}

// PasswordSecretKeySelector references the password value from a Secret resource.
type PasswordSecretKeySelector struct {
	// Name is the name of the secret.
	Name string `json:"name"`

	// +kubebuilder:default=password

	// Key is the key in the secret that specifies the requested data.
	Key string `json:"key"`
}

// Identification maps to the Identification key in the sysprep.xml answer file
// and provides information needed to join a workgroup or domain.
type Identification struct {

	// +optional

	// DomainAdmin is the domain user account used for authentication if the
	// virtual machine is joining a domain. The user does not need to be a
	// domain administrator, but the account must have the privileges required
	// to add computers to the domain.
	DomainAdmin string `json:"domainAdmin,omitempty"`

	// +optional

	// DomainAdminPassword is the password for the domain user account used for
	// authentication if the virtual machine is joining a domain.
	//
	// When not explicitly specified, the Key field for the selector defaults to
	// `domain_admin_password`.
	DomainAdminPassword *DomainPasswordSecretKeySelector `json:"domainAdminPassword,omitempty"`

	// +optional

	// DomainOU is the MachineObjectOU which specifies the full LDAP path name of
	// the OU to which the computer belongs.
	DomainOU string `json:"domainOU,omitempty"`

	// +optional

	// JoinWorkgroup is the workgroup that the virtual machine should join. If
	// this value is supplied, then the fields spec.network.domain,
	// spec.bootstrap.sysprep.identification.domainAdmin, and
	// spec.bootstrap.sysprep.identification.domainAdminPassword must be empty.
	JoinWorkgroup string `json:"joinWorkgroup,omitempty"`
}

// DomainPasswordSecretKeySelector references the password value from a Secret resource.
type DomainPasswordSecretKeySelector struct {
	// Name is the name of the secret.
	Name string `json:"name"`

	// +kubebuilder:default=domain_admin_password

	// Key is the key in the secret that specifies the requested data.
	Key string `json:"key"`
}

// +kubebuilder:validation:Enum=perSeat;perServer

// CustomizationLicenseDataMode is an enumeration of the different license
// modes.
type CustomizationLicenseDataMode string

const (
	// CustomizationLicenseDataModePerSeat indicates that a client access
	// license has been purchased for each computer that accesses the
	// VirtualCenter server.
	CustomizationLicenseDataModePerSeat CustomizationLicenseDataMode = "perSeat"

	// CustomizationLicenseDataModePerServer indicates that client access
	// licenses have been purchased for the server, allowing a certain number of
	// concurrent connections to the VirtualCenter server.
	CustomizationLicenseDataModePerServer CustomizationLicenseDataMode = "perServer"
)

// LicenseFilePrintData maps to the LicenseFilePrintData key in the sysprep.xml
// answer file and provides information needed to join a workgroup or domain.
type LicenseFilePrintData struct {

	// AutoMode specifies the server licensing mode.
	AutoMode CustomizationLicenseDataMode `json:"autoMode"`

	// +optional

	// AutoUsers indicates the number of client licenses purchased for the
	// VirtualCenter server being installed.
	//
	// Please note this value is ignored unless AutoMode is PerServer.
	AutoUsers *int32 `json:"autoUsers,omitempty"`
}

// UserData maps to the UserData key in the sysprep.xml answer file and provides
// personal data pertaining to the owner of the virtual machine.
type UserData struct {

	// FullName is the user's full name.
	FullName string `json:"fullName"`

	// OrgName is the name of the user's organization.
	OrgName string `json:"orgName"`

	// +optional

	// ProductID is a valid serial number.
	//
	// Please note unless the VirtualMachineImage was installed with a volume
	// license key, ProductID must be set or guest customization will fail.
	//
	// When not explicitly specified, the Key field for the selector defaults to
	// `domain_admin_password`.
	ProductID *ProductIDSecretKeySelector `json:"productID,omitempty"`
}

// ProductIDSecretKeySelector references the ProductID value from a Secret resource.
type ProductIDSecretKeySelector struct {
	// Name is the name of the secret.
	Name string `json:"name"`

	// +kubebuilder:default=product_id

	// Key is the key in the secret that specifies the requested data.
	Key string `json:"key"`
}
